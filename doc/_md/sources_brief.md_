---
Title: Brief Description for Project Sources
Generator: Umba Brief Scanner
---



# _libs/encoding/compact_enc_det

- `compact_enc_det.cc` - 
- `compact_enc_det.h` - 
- `compact_enc_det_fuzz_test.cc` - 
- `compact_enc_det_generated_tables.h` - 
- `compact_enc_det_generated_tables2.h` - 
- `compact_enc_det_hint_code.cc` - 
- `compact_enc_det_hint_code.h` - 
- `compact_enc_det_unittest.cc` - 
- `detail_head_string.inc` - 

# _libs/encoding

- `disable_warnings_begin.h` - 
- `disable_warnings_end.h` - 
- `encoding.cpp` - 
- `encoding.h` - 

# _libs/encoding/util

- `basictypes.h` - 
- `case_insensitive_hash.h` - 
- `commandlineflags.h` - 

# _libs/encoding/util/encodings

- `encodings.cc` - 
- `encodings.h` - 
- `encodings.pb.h` - 
- `encodings_unittest.cc` - 

# _libs/encoding/util/languages

- `languages.cc` - 
- `languages.h` - 
- `languages.pb.h` - 

# _libs/encoding/util

- `logging.h` - 
- `port.h` - 
- `string_util.h` - 
- `varsetter.h` - 

# _libs/marty_bigint

- `defs.h` - Definitions for marty_format

# _libs/marty_bigint/impl

- `marty_bigint.h` - 

# _libs/marty_bigint

- `marty_bigint.h` - Библиотека marty::bigint

# _libs/marty_bigint/tests

- `mul-speed-test-impl.cpp` - Сравниваем варианты умножения marty::BigInt на скорость
- `mul-speed-test-uint-default.cpp` - Сравниваем варианты умножения marty::BigInt на скорость с дефолтным для текущей системы размером чанка (обычно std::uint32_t)
- `mul-speed-test-uint8.cpp` - Сравниваем варианты умножения marty::BigInt на скорость с чанком std::uint8_t
- `op-tests-impl.cpp` - Тестим операторы marty::BigInt
- `op-tests-uint-default.cpp` - Тестим операторы marty::BigInt с дефолтным для текущей системы размером чанка (обычно std::uint32_t)
- `op-tests-uint8.cpp` - Тестим операторы marty::BigInt с чанком std::uint8_t

# _libs/marty_bigint

- `types.h` - Библиотека marty::bigint
- `undef_min_max.h` - 
- `utils.h` - Типы для marty::BigInt

# _libs/marty_containers

- `insertion_ordered_map.h` - map-like контейнер, в котором порядок обхода определяется последовательностью добавления элементов. Накидал пока минималку, если что, будем допиливать

# _libs/marty_cpp

- `c_escape.h` - C/C++ string escapement, simplified version (\o,\x,\u,\N not supported)
- `enums.h` - Autogenerated enumerations (Umba Enum Gen)

# _libs/marty_cpp/examples

- `01_normalization_and_tabs.cpp` - Тестируем cEscapeString, нормализацию CR LF, нормализацию trailing spaces, condenseSpacesToTabs, normalizeIndents
- `02_enum_generator.cpp` - Тестирование генератора enum'ов marty_cpp::enum_generate_
- `03_sort_includes.cpp` - Тестируем sort_includes.
- `enum_gen_cpp_templates_txt.c` - 

# _libs/marty_cpp

- `marty_cpp.h` - C++ (also good for other langs) identifiers style autodetect and format
- `marty_cpp_exceptions.h` - 
- `marty_enum.h` - Helpers for enum
- `marty_enum_impl_helpers.h` - 
- `marty_flag_ops.h` - 
- `marty_flags.h` - Helpers for flags
- `marty_ns.h` - Helpers for namespace
- `marty_ss.h` - Simple stream template
- `sort_includes.h` - 
- `src_normalization.h` - Simple strings normalization - LF normalization, Tab normalization, split to lines

# _libs/marty_cpp/warnings

- `disable_C5045.h` - 
- `disable_spectre_mitigation.h` - 
- `pop.h` - 
- `push.h` - 
- `push_disable_spectre_mitigation.h` - 

# _libs/marty_crc

- `marty_crc.h` - Работа с CRC

# _libs/marty_csv

- `marty_csv.h` - 
- `marty_csv_new.h` - 
- `pfscsv.h` - 
- `utils.h` - 

# _libs/marty_decimal

- `marty_bcd.h` - 
- `marty_bcd_decimal.h` - 
- `marty_bcd_decimal_impl.h` - 
- `marty_decimal.h` - 
- `marty_decimal_math.h` - 
- `marty_int_decimal.h` - 
- `marty_int_decimal_impl.h` - 
- `marty_relops_impl.h` - 

# _libs/marty_decimal/tests/src

- `benchmark_tests.cpp` - Тесты производительности и сравнение доморощеного Decimal, double и cpp_dec_float (вариант с хранилищем в std::basic_string)
- `cpp.h` - 
- `pi_test.cpp` - Тест производительности доморощеного Decimal на вычислении числа Пи
- `regression_tests.cpp` - Decimal type regression tests
- `safe_main.h` - 

# _libs/marty_decimal/tests/zulibs/marty_cpp

- `marty_cpp.h` - 

# _libs/marty_decimal

- `undef_min_max.h` - 

# _libs/marty_decimal/warnings

- `disable_C5045.h` - 
- `disable_spectre_mitigation.h` - 
- `pop.h` - 
- `push.h` - 
- `push_disable_spectre_mitigation.h` - 

# _libs/marty_expressions

- `base_types.h` - Библиотека marty::expressions
- `defs.h` - Definitions for marty_format
- `enum_descriptions.h` - Autogenerated enumerations description maps (Umba Enum Gen)
- `enums.h` - Autogenerated enumerations (Umba Enum Gen)

# _libs/marty_expressions/impl

- `ep_common.h` - 
- `ep_dump.h` - 
- `ep_waitOperand.h` - 
- `ep_waitOperator.h` - 
- `ep_waitOperatorOrFunctionCall.h` - 
- `ep_waitUnaryPrefixOperatorOrValue.h` - 

# _libs/marty_expressions

- `marty_expressions.h` - Библиотека marty::expressions
- `sample_op_traits.h` - Пример трейтов операторов
- `simple_bool_expressions.h` - Библиотека marty::expressions - простой разбор булевых выражений. Допустимы операторы '|', '&' и '!', а также группирующие скобки

# _libs/marty_expressions/tests

- `test01.cpp` - 

# _libs/marty_expressions

- `tokenizer_helpers.h` - Хелперы для обработки событий токенизера
- `truth_table.h` - Библиотека marty::expressions - таблица истинности (для использования с логическими выражениями)
- `types.h` - Библиотека marty::expressions
- `undef_min_max.h` - 
- `utils.h` - Утилзы

# _libs/marty_format

- `defs.h` - Definitions for marty_format
- `enums.h` - Autogenerated enumerations (Umba Enum Gen)
- `exceptions.h` - Исключения для marty::format. Стиль именов - snake_case, так как мы наследуемся от стандартной библиотеки

# _libs/marty_format/impl

- `internal_locale_info_impl_base.h` - 
- `internal_locale_info_impl_win.h` - 
- `internal_processFormatStringImpl.h` - 
- `internal_processFormatValuesImpl.h` - 
- `simple_convert_impl.h` - 
- `simple_convert_prototypes.h` - 
- `value_format_impl.h` - 
- `value_format_prototypes.h` - 

# _libs/marty_format

- `locale_info.h` - Типы для marty::format
- `marty_format.h` - Форматирование типа std::format в рантайме
- `marty_format_types.h` - Типы для marty::format

# _libs/marty_format/std_format_tests

- `ds01.cpp` - 
- `ds02.cpp` - 
- `gcvt_test.cpp` - 
- `generate_common.h` - 
- `std_format_tests_hex.cpp` - 
- `std_format_tests_hex_generate.cpp` - 
- `std_to_chars_tests.cpp` - 

# _libs/marty_format

- `time_spent.md__` - 
- `undef_min_max.h` - 
- `utils.h` - Типы для marty::format

# _libs/marty_hex

- `bit_vector.h` - BitVector class
- `enum_descriptions.h` - Autogenerated enumerations description maps (Umba Enum Gen)
- `enums.h` - Autogenerated enumerations (Umba Enum Gen)
- `file_pos_info.h` - File position info
- `hex_entry.h` - Hex file data parsing (Intel HEX)
- `hex_info.h` - Hex block/file info
- `intel_hex_parser.h` - Hex file data parsing (Intel HEX)
- `marty_hex.h` - Hex file data parsing (Intel HEX)
- `memory_fill_map.h` - BitVector class
- `types.h` - Type definitions for marty_hex
- `utils.h` - Utils for hex file parsing

# _libs/marty_mem

- `assert.h` - Asserts for marty::mem
- `bits.h` - Битовые утилиты для marty::mem
- `enums.h` - Autogenerated enumerations (Umba Enum Gen)
- `exceptions.h` - Исключения для marty::mem. Стиль именов - snake_case, так как мы наследуемся от стандартной библиотеки
- `fixed_size_types.h` - Алиасы для целых типов
- `fixed_size_types_.h` - Алиасы для целых типов. Версия для включения в произвольное пространство имён
- `linear_address.h` - Реализация линейного адреса
- `marty_mem.h` - Симуляция памяти
- `segmented_address.h` - Реализация сегментного адреса
- `types.h` - Определения базовых типов
- `utils.h` - Утилиты для marty::mem
- `virtual_address.h` - Виртуальный адрес - интерфейс
- `virtual_address_memory_iterator.h` - Виртуальный адрес - интерфейс

# _libs/marty_svg

- `enums.h` - Autogenerated enumerations (Umba Enum Gen)
- `marty_svg.h` - SVG-хелперы

# _libs/marty_utf

- `defs.h` - DEfinitions for marty_utf
- `utf.h` - 
- `utf_impl.h` - 

# _libs/sfmt

- `simple_formatter.cpp` - 
- `umba_lout.cpp` - Реализация глобального объекта потока LOG вывода umba::lout

# _libs/umba

- `CMakeCCompilerId.c` - 
- `CMakeCXXCompilerId.cpp` - 
- `algoritms.h` - Различные колхозные алгоритмы
- `alloca.h` - Совместимая версия alloca/_alloca
- `app_main.h` - 
- `arithmetic_strong_typedef.h` - Какая-то шляпа, уже и не помню. Вроде оставлена чисто для совместимости
- `assert.h` - Универсальная реализация UMBA_ASSERT
- `attribute_weak.h` - 
- `autolock.h` - Автоматический захват и освобождение ресурса. Объект-ресурс должен предоставлять методы lock и unlock.
- `basic_interfaces.h` - Базовые интерфейсы
- `basic_interfaces_impl.h` - Реализация некоторых базовых интерфейсов
- `bits.h` - Манипуляции с битами
- `bits_fmt.h` - Вывод битсетов в поток
- `char_writers.h` - Реализации интерфейса ICharWritter для различных целевых шляп типа COM-порта или файла
- `cli_tool_helpers.h` - Хелперы для утилит командной строки (CLI)
- `clipboard_win32.h` - Хелперы для виндового клипборда
- `cmd_line.h` - Разная шляпа по разбору командной строки для консольных утилит
- `compiler_id_cpp.h` - 
- `compiler_info.cpp` - 
- `compiler_info.h` - 
- `const_string.h` - Константные строки - обёртка для строковых литералов (экспериментальная фуета)
- `container.h` - Тут разные странные контейнеры, как самописные, так и стыренные
- `container_utility.h` - 
- `critical_section.cpp` - Реализация критической секции
- `critical_section.h` - Реализация критической секции.
- `debug_helpers.h` - Поддержка отладки
- `dump.h` - Хелперы для дампа
- `enum_helpers.h` - Хелперы для enum'ов
- `env.h` - Работа с переменными окружения
- `errors.h` - Ошибки, и связанные с ними определения
- `escape_string.h` - 
- `exception.h` - Umba-исключения
- `file_helpers.h` - Файловые хелперы. Они разъехались по разным местам. А хидер остался для совместимости
- `filecache.h` - Файловый кеш (эксперименты)
- `filename.h` - Утилиты для работы с именами файлов
- `filename_set.h` - Отображение имен файлов в id и обратно
- `filesys.h` - Прослойка абстракций для работы с файловой системой, версия, работающая одинаково с любыми типами имён (char/wchar_t)
- `filesys_scanners.h` - Разные сканеры имен. По маскам и не только.
- `flag_helpers.h` - Какие-то хелперы для enum флагов. Выпочковалось в итоге в часть marty_cpp
- `format_message.h` - Форматирование сообщений при помощи макросов $(Macro)
- `format_utils.h` - Утилиты для форматирования
- `gmesg.h` - 
- `hr_counter.h` - Подсистема hr_counter - счетчики высокого разрешения
- `html_base.h` - 
- `i_char_writer.h` - Интерфейс для использования в форматном выводе
- `id_gen.h` - 
- `include_finder.h` - Поиск подключаемых файлов
- `info_log.h` - Хелперы для лога
- `ini.h` - Разбор INI-файла
- `interface.h` - Базовые определения для интерфейсов, и связанные с ним определения

# _libs/umba/internal

- `env.h` - Работа с переменными окружения
- `filesys.h` - Прослойка абстракций для работы с файловой системой
- `filesys_impl_helpers.h` - 
- `winerror_org.h` - 
- `winerror_prepared.h` - 
- `winstrerrorname.cxx` - 
- `winstrerrorname.h` - 

# _libs/umba

- `iterator.h` - 
- `legacy.h` - Подключение классических хидеров скопом
- `linefeedtype.h` - Объявление типа перевода строки и разные хелперы
- `lineinfo.h` - LineInfo и сопутствующее. Устаревшая (непосредственно содержащая строку) версия API
- `lineposinfo.h` - Типы для указания положения в текстовом файле
- `lineview.h` - Структура LineView и соответствующие функции
- `log.h` - Вывод в лог (на консоль), хелперы
- `macro_helpers.h` - Макросики-матросики. У макросов нет вопросов. Хелперы
- `macros.h` - Макросики-матросики. У макросов нет вопросов. Адаптация старенького кода для подстановки макросов. Осторожно! Может вызывать кровотечение из глаз
- `name_version.h` - Работа с именоваными номерами версий
- `nul_ostream.h` - Пустопорожний Ostream, никуда ничего не выводит
- `null_inserter.h` - Ничего не делающий insert_iterator
- `numeric_version.h` - Работа с номерами версий
- `optimize_pop.h` - Восстанавливает предыдущий уровень оптимизации
- `optimize_speed.h` - Включает режим оптимизации по скорости
- `packpop.h` - Восстановление значения по умолчанию для упаковки структур
- `parse_utils.h` - Утилиты для парсинга
- `perf_counters.h` - Подсистема perf_counters - счетчики производительности
- `preprocessor.h` - Различные общие макросы препроцессора
- `program_location.h` - Поиск месторасположения self EXE-шника
- `properties.h` - Реализация properties на чистом C++
- `pushpack1.h` - Сохранение текущих настроек и установка упаковки структур по 1
- `pushpack2.h` - Сохранение текущих настроек и установка упаковки структур по 2
- `pushpack4.h` - Сохранение текущих настроек и установка упаковки структур по 4
- `pushpack8.h` - Сохранение текущих настроек и установка упаковки структур по 8
- `qtui-show-simple-message.h` - Qt-хелпер для отображения MessageBox
- `regex_helpers.h` - Помощяки для плюсовых регулярок. В тч (простая_маска_*_?) -> ECMA Regex
- `relops.h` - 
- `rgbquad.h` - Реализация RGB четвертяка. Хранит RGB и Alpha-канал компоненты цвета
- `rule_of_five.h` - Макросы для правила пяти - надоело руками выписывать. Правило пяти - https://habr.com/ru/companies/otus/articles/800089/
- `scanners.h` - 
- `scope_exec.h` - Выполнение лямбд при объявлении переменной и при выходе из скоупа
- `shellapi.h` - 
- `stl.h` - Совместимое со всеми компиляторами подключение стандартных заголовков
- `stl_keil.h` - Некоторые фичи C++11, которые не реализованы библиотеке компилятора Keil
- `stl_keil_initializer_list.h` - 
- `stl_keil_type_traits.h` - Перетащенное под старый Кейл type_traits из GCC
- `string.h` - 
- `string_char_writers.h` - 
- `string_plus.h` - Разная всячина для строк в C++ стиле
- `text_iterator_traits.h` - 
- `text_position_info.h` - 
- `text_utils.h` - Шляпы с текстом
- `the.h` - 
- `the_.h` - 
- `time_service.cpp` - На базе кода под STM32, адаптация для кроссплатформы, реализация
- `time_service.h` - Подсистема time_service
- `timestamp.h` - Представление временного интервала в сутках, часах, минутах, секундах и милисекундах
- `transliteration.h` - 
- `umba.h` - Подключение базовых файлов UMBA
- `umba_cpp.h` - Разная всячина в C++ стиле
- `undef_FormatMessage.h` - Undef'ы тупого мусора
- `undef_min_max.h` - Undef'ы тупого мусора
- `units.h` - 
- `user_literals.h` - Типа пользовательские литералы
- `utf.h` - 
- `utf8.h` - 
- `utf_impl.h` - 
- `utility.h` - Утилитки в C++ стиле
- `variadic_helpers.h` - Хелперы для вариадик-шаблонов

# _libs/umba/warnings

- `disable_C4061.h` - 
- `disable_C4062.h` - 
- `disable_C4127.h` - 
- `disable_C4191.h` - 
- `disable_C4244.h` - 
- `disable_C4265.h` - 
- `disable_C4267.h` - 
- `disable_C4355.h` - 
- `disable_C4365.h` - 
- `disable_C4464.h` - 
- `disable_C4555.h` - 
- `disable_C4623.h` - 
- `disable_C4820.h` - 
- `disable_C4840.h` - 
- `disable_C4868.h` - 
- `disable_C4996.h` - 
- `disable_C5045.h` - 
- `disable_C5204.h` - 
- `disable_C5219.h` - 
- `disable_C5267.h` - 
- `disable_common.h` - 
- `disable_condition_is_const.h` - 
- `disable_def_ctor_implicitly_deleted.h` - 
- `disable_enumerator_not_handled.h` - 
- `disable_fn_or_var_unsafe.h` - 
- `disable_implicit_copy_ctor_deprecated.h` - 
- `disable_non_portable_variadic.h` - 
- `disable_non_trivial_destructor_not_virtual.h` - 
- `disable_padding_added.h` - 
- `disable_rel_inc_contains_dbldot.h` - 
- `disable_result_not_used.h` - 
- `disable_signed_unsigned_mismatch.h` - 
- `disable_spectre_mitigation.h` - 
- `disable_this_used_in_base_member_initializer_list.h` - 
- `disable_trivial_destructor_not_virtual.h` - 
- `disable_unsafe_conversion.h` - 
- `pop.h` - 
- `push.h` - 
- `push_disable_C4061.h` - 
- `push_disable_C4062.h` - 
- `push_disable_C4127.h` - 
- `push_disable_C4191.h` - 
- `push_disable_C4244.h` - 
- `push_disable_C4265.h` - 
- `push_disable_C4267.h` - 
- `push_disable_C4355.h` - 
- `push_disable_C4365.h` - 
- `push_disable_C4464.h` - 
- `push_disable_C4555.h` - 
- `push_disable_C4623.h` - 
- `push_disable_C4820.h` - 
- `push_disable_C4840.h` - 
- `push_disable_C4868.h` - 
- `push_disable_C4996.h` - 
- `push_disable_C5045.h` - 
- `push_disable_C5204.h` - 
- `push_disable_C5219.h` - 
- `push_disable_C5267.h` - 
- `push_disable_common.h` - 
- `push_disable_condition_is_const.h` - 
- `push_disable_def_ctor_implicitly_deleted.h` - 
- `push_disable_enumerator_not_handled.h` - 
- `push_disable_fn_or_var_unsafe.h` - 
- `push_disable_implicit_copy_ctor_deprecated.h` - 
- `push_disable_non_portable_variadic.h` - 
- `push_disable_non_trivial_destructor_not_virtual.h` - 
- `push_disable_padding_added.h` - 
- `push_disable_rel_inc_contains_dbldot.h` - 
- `push_disable_result_not_used.h` - 
- `push_disable_signed_unsigned_mismatch.h` - 
- `push_disable_spectre_mitigation.h` - 
- `push_disable_this_used_in_base_member_initializer_list.h` - 
- `push_disable_trivial_destructor_not_virtual.h` - 
- `push_disable_unsafe_conversion.h` - 

# _libs/umba

- `win32_utils.h` - 
- `winconhelpers.h` - Хелперы для работы с консолью под Windows
- `zz_detect_environment.h` - ZZ Определение сборочного окружения и целевой платформы.
- `zz_error_codes.h` - ZZ Коды ошибок
- `zz_i_char_writer_term.h` - ZZ Утилиты для вывода в терминал
- `zz_i_char_writer_term_colors.h` - ZZ Цветочки для терминала
- `zz_i_char_writer_term_console_type.h` - ZZ Дефиниции про консоль
- `zz_i_char_writer_term_utils.h` - ZZ Какие-то консольные хелперы
- `zz_inc_windows.h` - ZZ Правильный порядок инклюдов для винды
- `zz_mcu_low_level.h` - ZZ Microcontroller Unit Low Level definitions

# _src/umba-hex

- `AppConfig.h` - 
- `AppVerConfig.h` - 
- `ArgParser.h` - 
- `log.h` - 
- `marty-hex-test-001.cpp` - Тестим marty::hex::MemoryFillMap
- `marty-hex-test-002.cpp` - Тестим чтение диаграм
- `marty-hex-test-003.cpp` - Тестим сериализацию чисел в разные форматы и разные размеры
- `marty-hex-test-004.cpp` - Выводим мин-максы для разных интегральных типов - https://en.cppreference.com/w/cpp/types/climits. Также тестим различные утилитные функции.
- `marty-hex-test-005.cpp` - Тестим byteSwap и генерацию маски по количеству бит
- `marty-hex-test-006.cpp` - Тестируем marty::mem::Memory
- `marty-hex-test-007.cpp` - Тестируем marty::mem::VirtualAddressMemoryIterator
- `marty-hex-test-008.cpp` - Тестим чтение HEX, первичную проверку, получение диапазонов блоков занятой памяти
- `marty-hex-test-009.cpp` - Тестим чтение диаграм, и заполнение их данными
- `marty-hex-test-010.cpp` - Тестим чтение диаграм, и заполнение их данными - код установки данных выделен в отдельную функцию memorySetVariable, добавлено вырезание YAML/style отдельной функцией prepareTextForDiagramParsing
- `marty-hex-test-011.cpp` - Тестируем вырезание YAML, его простой парсинг и style
- `marty-hex-test-012.cpp` - Рисуем SVG, drawWord и прочие тесты примитивов.
- `marty-hex-test-013.cpp` - Чтение диаграм и подготовка к рисованию
- `marty-hex-test-014.cpp` - Пытаемся рисовать диаграмму
- `marty-hex-test-015.cpp` - Рисуем диаграмму и добавляем опции
- `marty-hex-test-016.cpp` - Выносим подготовку к рисованию диаграммы в либу
- `marty-hex-test-017.cpp` - Выносим подготовку к рисованию диаграммы в либу
- `marty-hex-test-018.cpp` - Парсим форматную строку (старая версия, поломана)
- `marty-hex-test-019.cpp` - Парсим форматную строку - без автомата
- `marty-hex-test-020.cpp` - Парсим форматную строку - без автомата (функцию вынес в библиотеку)
- `marty-hex-test-021.cpp` - Тестим функцию форматирования с аргументами в виде marty::format::Args
- `marty-hex-test-022.cpp` - Тестим LocaleInfo
- `marty-hex-test-023.cpp` - Тестим LocaleInfo
- `marty-hex-test-024.cpp` - Тестим операторы marty::BigInt с чанком std::uint8_t
- `marty-hex-test-025.cpp` - Тестим операторы marty::BigInt с дефолтным для текущей системы размером чанка (обычно std::uint32_t)
- `marty-hex-test-026.cpp` - Сравниваем варианты умножения marty::BigInt на скорость с чанком std::uint8_t
- `marty-hex-test-027.cpp` - Сравниваем варианты умножения marty::BigInt на скорость с дефолтным для текущей системы размером чанка (обычно std::uint32_t)
- `marty-hex-test-028.cpp` - Запилил парсер CSV
- `marty-hex-test-029.cpp` - Тестируем разбор CSV (marty::csv)
- `marty-hex-test-030.cpp` - Тестируем marty_expressions
- `marty-hex-test-031.cpp` - Тестируем marty_expressions - простой парсинг булевых выражений
- `marty-hex-test-032.cpp` - Тестируем лексер UFSM
- `marty-hex-test-033.cpp` - Тестируем парсер UFSM
- `marty-hex-test-034.cpp` - 
- `marty-hex-test-tpl.cpp` - Тестим чтение HEX, первичную проверку, получение диапазонов блоков занятой памяти

# _src/umba-hex/marty_format_examples

- `mfmt_example_01.cpp` - Пример marty::format example_01
- `mfmt_example_02.cpp` - Пример marty::format example_02
- `mfmt_example_03.cpp` - Пример marty::format example_03
- `mfmt_example_03_generate.cpp` - Пример marty::format example_03_generate
- `mfmt_example_04.cpp` - Пример marty::format example_04
- `mfmt_example_04_generate.cpp` - Пример marty::format example_04_generate
- `mfmt_example_05.cpp` - Пример marty::format example_05
- `mfmt_example_06.cpp` - Пример marty::format example_06
- `mfmt_example_07.cpp` - Пример marty::format example_07
- `mfmt_example_08.cpp` - Пример marty::format example_08
- `mfmt_example_09.cpp` - Пример marty::format example_09

# _src/umba-hex

- `mermaid_svg.h` - SVG-хелперы

# _src/umba-hex/std_format_tests

- `gcvt_test.cpp` - 
- `std_to_chars_tests.cpp` - 

# _src/umba-hex

- `svg-style.h` - 
- `umba-hex.cpp` - 

# tests

- `marty-hex-test-031_01_00.gv` - 
- `marty-hex-test-031_01_01.gv` - 
- `marty-hex-test-031_01_02.gv` - 
- `marty-hex-test-031_01_03.gv` - 
- `marty-hex-test-031_01_04.gv` - 
- `marty-hex-test-031_01_05.gv` - 
- `marty-hex-test-031_01_06.gv` - 
- `marty-hex-test-031_01_07.gv` - 
- `marty-hex-test-031_01_08.gv` - 
- `marty-hex-test-031_01_09.gv` - 
- `marty-hex-test-031_01_10.gv` - 
- `marty-hex-test-031_01_11.gv` - 
- `marty-hex-test-031_01_12.gv` - 
- `marty-hex-test-031_01_13.gv` - 
- `marty-hex-test-031_01_14.gv` - 
- `marty-hex-test-031_01_15.gv` - 
- `marty-hex-test-031_01_S.gv` - 
