---
Title: Simple sample
---

%% Типы данных могут быть: идентификатор, строковый литерал, число, 
%% процент (число с суффиксом "%"), именованный аргумент (вернее, ссылка на него)
%% Именованные аргументы всегда задаются со значениями по умолчанию
%% Именованные аргументы 


%% Импортируем изображение ethernet порта из библиотеки
import ports.ethernet_port as EthPort %% Будет использоваться далее как EthPort

%% DB9 порт RS-232 - 
import ports.RS232_DB9 %% Будет использоваться далее как RS232_DB9 без переименования

%% Или, как плюплюшечке?
import <ports.ethernet_port> as EthPort %% Для библиотечных импортов
import "ports.ethernet_port" as EthPort %% Для импортов с поиском относительно текущего файла в первую очередь?


%% Задаём изображение SimpleShape прямо в текущем файле,
%% не используя импорт из библиотек
%% Аргументам всегда задаём значения по умолчанию
%% При рисовании фигуры все абсолютные координаты получают смещение, которое задано при вызове рисования фигуры

%% Надо подумать про масштабирование, про повороты пока не будем париться
%% Но - возьмем заранее - базовая точка поворота - левый верхний, или центр?

%% Для встроенных фигур-примитивов точку присоединения выносной линии высчитываем автоматом.
%% Для пользовательских фигур надо подумать, как задать восемь точек присоединения выносных линий
%%   \  |  /
%%    * * *
%%  - *   * - 
%%    * * *
%%   /  |  \

%% Надо подумать, какая точка будет использоваться как базовая при вставке фиуры в другой рисунок

shape SimpleShape(color="green", fillColor=red)

  %% Параметры рисования действуют на текущую фигуру

  stroke-width 3 %% рамка толщиной 3 (по умолчанию 1)
  stroke-color $(color) %% зеленая рамка (по умолчанию, как задано в аргументах)
  stroke-opacity 0.5
  stroke-opacity 75%
  stroke 5 blue %% рамка - синяя, толщина - 5, непрозрачность - опциональная

  fill $(fillColor) 0.25 %% заполнение - красным 
  %% (по умолчанию, как задано в аргументах), непрозрачность - 25%

  %% Рисуем квадрат без закруглений
  square round-none X Y SIZE

  %% Рисуем квадрат без закруглений - round-none можно не использовать, 
  %% если тип закруглений не указан, то закруглений нет
  square round-none X Y SIZE

  %% Рисуем квадрат с закруглениями
  square round X Y SIZE R

  %% Рисуем квадрат с закруглениями слева
  square round-left X Y SIZE R

  %% Рисуем квадрат с закруглениями сверху
  square round-top X Y SIZE R

  %% Рисуем квадрат с закруглениями сверху-слева и снизу справа
  square round-left-top | round-right-bottom X Y SIZE R

  %% Рисуем прямоугольник с закруглениями сверху-слева и снизу справа
  rect round-left-top | round-right-bottom X Y SIZE_X SIZE_Y R

  %% Рисуем прямоугольник с острыми углами
  rect X Y SIZE_X SIZE_Y

endshape

%% Закончили задавать локальные фигуры


%% Фигуры - встроенные или пользовательские
%% Встроенные
%%   square
%%   rect
%%   circle
%%   path
%%   что-то ещё - добавим по мере необходимости
%%   какие-то имена зарезервируем сразу, но пока делать не будем, например: arc, chord

%% При отрисовке встроенных фигур аргументы не задаются, 
%% при отрисовке пользовательских - задаются опционально

paint %% Начали рисование

%% Тут у нас параметры рисования дефолтные - контур - толщина 1, цвет черный, заполнение - прозрачное

%% Задаём шрифт
font-size 20
font-family "MS Sans Serif" Serif
font "MS Sans Serif" Serif 20
font 20 "MS Sans Serif" Serif 

%% Дублируем по X и Y CNTX и CNTY раз фигуру SimpleShape, цвет рамки - aqua, с позиции X Y
SimpleShape(color="aqua") X Y repx CNTX STEPX repy CNTY STEPY

%% Пути - как в SVG, всё то же самое, буквы команд и аргументы - такие же
%% Единственное отличие - первая пара - это координаты старта, абсолютные,
%% остальные - относительные, вне зависимости от регистра
%% 
path X Y v dY h dX l dX dY q X1 X1 X2 X2 z

%% Окружность радиуса R, с центром в CX CY
circle CX CY R REPR A1 CNT dA

%% Повторяем окружность радиуса R CNT раз, вокруг центра CX CY, стартовый угол A, шаг угла - dA
%% Углы задаются в радианах, для градусов используем символ процента - 90% - это 90 градусов
circle CX CY R REPR R2 A CNT dA


%% Текст
%% auto/middle/hanging - выравнивание по вертикали, смысл, как в SVG
%% start|left/center/end|right - выравнивание по горизонтали, center - это middle в SVG, 
%%   переименовали, чтобы не было коллизии с вертикальным middle
%%   start - оригинальное значение из SVG, left - алиас
%%   end - оригинальное значение из SVG, right - алиас
"Label Text" auto/middle/hanging start|left/center/end|right X Y %% Рисуем текст в позиции X Y


%% Сноски

%% Полка для текста отделяется в сноске точкой
%% Длина линии сноски и полки задаётся количеством символов минус ('-') с каким-то шагом (шаг задаётся опцией).
%% Количество символов "минус" всегда не менее двух (или даже трёх, если захочется присунуть оператор декремента)

%% Сноска направо вверх, потом полка, над полкой - текст
circle CX CY R /---.-- "Индикатор"

%% Сноска налево вверх, потом полка, в конце полки - кружок с цифрой, подпись - под рисунком
circle CX CY R /---.-- ("Индикатор") 

%% Сноска налево вверх, потом - кружок с цифрой, подпись - под рисунком
circle CX CY R /---("Индикатор")

%% Сноска направо вниз с полкой и номером сноски
circle CX CY R \---.--- ("Индикатор") 
circle CX CY R \___.--- ("Индикатор") %% Альтернативная версия
circle CX CY R \___.___("Индикатор") %% Полка тоже альтернативная

%% Сноска налево вверх с полкой и номером сноски
circle CX CY R ---\.--- ("Индикатор") 

%% Сноска налево вниз с полкой и номером сноски
circle CX CY R ---/.--- ("Индикатор") 
circle CX CY R ___/.--- ("Индикатор") %% Альтернативная версия

%% Сноска прямо по горизонтали направо (примыкает к фигуре справа) с полкой и номером сноски.
%% В данном случае налка сливается с выносной линией
circle CX CY R <---.--- ("Индикатор") 

%% Сноска прямо по горизонтали налево с полкой и номером сноски.
circle CX CY R --->.--- ("Индикатор") 

%% Сноска прямо вниз, полка - auto
circle CX CY R ---|.--- ("Индикатор") 

%% Сноска прямо вниз, полка направо
circle CX CY R ---|.---> ("Индикатор") 

%% Сноска прямо вниз, полка налево
circle CX CY R ---|.<--- ("Индикатор") 

%% Сноска прямо вверх
circle CX CY R ---^.--- ("Индикатор") 
circle CX CY R ___^.--- ("Индикатор") %% Альтернативная версия
circle CX CY R ___|.--- ("Индикатор") %% Альтернативная версия

%% Направление полки можно задавать и для диагональных полок, будет выглядеть 
%% возможно странно, но имеет право на жизнь


%% Сноски могут быть в определении фигур (shape)
%% У нас может быть желание как использовать сноски из определения фигуры, 
%% так и желание отключить такую возможность

! EthPort X Y %% Рисуем фигуру ethernet_port из библиотеки ports, отключаем сноски (символом '!', но при рисовании фигуры рисуем её явно заданную сноску)


%% Что ещё? 
%% - [ ] Как-то задавать направление полки по дефолту для вертикальных сносок 
%%      (отдельно для сносок вверх и для сносок вниз)?
%% - [ ] команда "lib", после которой идут команды "shape"/"endshape", но не может идти команда "paint"?
%% - [ ] команда "options" - идёт после команды "paint" - тут задаём, направление для верт. сносок, например?


Вместо отдельных числовых значений могут быть выражения. Их надо заключать в скобки.
Надо отыскать построитель выражений (где-то в omf51)

Надо сделать токен фильтр, который приклеивает символ процента к числу и меняет тип токена.
Задать доп константы для чисел с процентом? В базе?
      
Найти либу, которая форматирует. Или сделать самому?
  Standard format specification (since C++20) - https://en.cppreference.com/w/cpp/utility/format/spec




